"""để có tọa đổ điểm so với ảnh gốc thì lấy contourt cộng với [offset, offset] của ảnh sẽ r"""
"""
       ########################################
       # cần có những gì để mà tạo 1 file geojson theo đúng tọa độ ảnh, và độ phân giải
       # ######################################
       Input:  - image
               - polygon: toa dộ địa lý rồi
       Output: -file geojson: dung toa do dia ly
       Mô tả: polygon này được sinh ra từ khi predict, nó sẽ là các countour
"""


import json
from shapely import geometry
import string
import random
import rasterio
import math
from pyproj import Proj, transform

# Hàm tính khoảng cách 2 điểm
def distance(pointA, pointB):
    return math.sqrt((pointA[0] - pointB[0]) ** 2 + (pointA[1] - pointB[1]) ** 2)

# Chuyển tọa độ pixel thành tọa độ địa lý
def pixel_to_geographic_location(pixel_location, origin, resolution_x, resolution_y):
    x = origin[0] + pixel_location[0] * resolution_x
    y = origin[1] - pixel_location[1] * resolution_y
    return x, y

# Hàm này có tác dụng chuyển list(list_polygons) => list(shapely.geometry.polygon.Polygon)
def list_polygons_to_list_shapely_polygons(polygons):
    shapely_polygons = []
    for polygon in polygons:
        shapely_polygon = geometry.Polygon(polygon)
        shapely_polygons.append(shapely_polygon)
    return shapely_polygons

# Hàm này có tác dụng chuyển toạn độ ảnh sang tọa độ địa lý và chuyển tọa độ EPGS bằng hàm transform, trả về 1 list các diction có cấu trúc là {"geometry":value,"length":value} với length là độ dài thuyền    
"""
# Dây là 1 geo_polygon:
#       [(191820.84686279297, 149055.98822021484),
#        (191795.64678955078, 149077.58807373047),
#        (191862.56451416016, 149155.6587524414),
#        (191887.76458740234, 149134.05889892578),
#        (191820.84686279297, 149055.98822021484)]
"""
def list_shapely_polygons_to_list_dict_geometry_have_coord(shapely_polygons, origin, res_x, res_y):
    geo_polygons = []
    for polygon in shapely_polygons:
        geo_polygon = [pixel_to_geographic_location(point, origin, res_x, res_y) for point in polygon.exterior.coords] # đây sẽ có tọa độ địa lý và là 1 geo polygon
        
        # đoạn này có mục đích là lấy độ dài tàu để làm gì thì shipdetection yêu cầu
        lengths = []
        for i in range(len(geo_polygon) - 1):
            lengths.append(distance(geo_polygon[i], geo_polygon[i + 1]))
        ship_length = max(lengths)
        # đoạn này là chuyển hệ tọa độ của điểm ảnh từ tọa độ p1 sang p2
        geo_polygon = [transform(p1, p2, x, y) for x, y in geo_polygon]
        geo_polygon = geometry.Polygon(geo_polygon)
        geo_polygons.append({'geometry': geo_polygon, 'length': ship_length})
    return geo_polygons

# Hàm có tác dụng xuất geojson từ list[dict{geo,length}]
def create_geojson_from_list_polygon(geo_polygons, output_path):
    properties = {
                    "ship_id": -1,
                    "length": 0,
                    "planet_image_id": "nen la id image",
                    "planet_image_source": "3-band (RGB) PlanetScope imagery that is framed as captured",
                    "detect_date": "nen la ngay chinh xac cua anh",
                    "accuracy": "high"
                 }
    ship_boxes = []
    features = []
    for polygon in geo_polygons:
        ship_boxes.append(polygon['geometry'])
        geom = geometry.mapping(polygon['geometry'])
        props = properties.copy()
        props.update(length=polygon['length'])
        feature = {'type': 'Feature', 'properties': props, 'geometry': geom}
        features.append(feature)
    feature_collection = {'type': 'FeatureCollection', 'features': features}
    with open(output_path, 'w') as dest:
        dest.write(json.dumps(feature_collection))

    # for index, polygon in enumerate(geo_polygons):
    #     ship_boxes.append(polygon['geometry'])
    #     geom = geometry.mapping(polygon['geometry'])
    #     props = properties.copy()
    #     ship_id = random_string(8) # cái đoạn này là muốn sinh một mã ngẫu nhiên cho cái tên tàu
    #     props.update(ship_id=ship_id)
    #     props.update(length=polygon['length'])
    #     feature = {'type': 'Feature', 'properties': props, 'geometry': geom}
    #     features.append(feature)
    # feature_collection = {'type': 'FeatureCollection', 'features': features}
    # with open(output_path, 'w') as dest:
    #     dest.write(json.dumps(feature_collection))
    






#if __name__=='__main___':

polygons_test = [
                [[1987.0, 639.0], [1987.0, 629.0], [2004.0, 629.0], [2004.0, 639.0]], 
                [[1986.0, 639.0], [1986.0, 630.0], [2004.0, 630.0], [2004.0, 639.0]], 
                [[2192.6000061035156, 491.20001220703125], [2184.6000061035156, 475.20001220703125], [2199.3999938964844, 467.79998779296875], [2207.3999938964844, 483.79998779296875]], 
                [[2480.63720703125, 999.5576171875], [2454.7257080078125, 976.885009765625], [2469.531005859375, 959.964599609375], [2495.4425048828125, 982.63720703125]], 
                [[2895.0, 827.0], [2895.0, 813.0], [2917.0, 813.0], [2917.0, 827.0]], 
                [[3514.0, 1075.0], [3514.0, 1052.0], [3530.0, 1052.0], [3530.0, 1075.0]], 
                [[3676.9804077148438, 700.4243469238281], [3643.7902221679688, 693.3121643066406], [3647.2146606445312, 677.3316955566406], [3680.4048461914062, 684.4438781738281]], 
                [[3579.6000366210938, 662.8000183105469], [3566.0000610351562, 656.0000305175781], [3570.8001098632812, 646.4000549316406], [3584.4000854492188, 653.2000427246094]], 
                [[3673.012451171875, 701.2033386230469], [3644.1328125, 693.5021057128906], [3648.6473388671875, 676.5726623535156], [3677.5269775390625, 684.2738952636719]], 
                [[3518.230770111084, 1077.8460693359375], [3511.838466644287, 1054.4075927734375], [3523.684616088867, 1051.1768798828125], [3530.076919555664, 1074.6153564453125]], 
                [[3576.7692337036133, 663.8461608886719], [3563.384620666504, 654.9230651855469], [3569.538459777832, 645.6922912597656], [3582.9230728149414, 654.6153869628906]], 
                [[3674.8353118896484, 700.7411804199219], [3642.9647064208984, 693.6588439941406], [3646.6588287353516, 677.0353088378906], [3678.5294342041016, 684.1176452636719]], 
                [[1272.8756713867188, 1332.5459594726562], [1264.8486328125, 1326.7081298828125], [1279.5513305664062, 1306.491943359375], [1287.578369140625, 1312.3297729492188]], 
                [[2484.0, 997.9999923706055], [2457.0, 979.9999923706055], [2469.4615478515625, 961.3076858520508], [2496.4615478515625, 979.3076858520508]], 
                [[2661.3529663085938, 1559.4117431640625], [2646.6470336914062, 1550.5882568359375], [2653.9705200195312, 1538.38232421875], [2668.6764526367188, 1547.205810546875]], 
                [[2803.84619140625, 1543.7693481445312], [2801.4307861328125, 1524.4462280273438], [2809.0615844726562, 1523.4923706054688], [2811.4769897460938, 1542.8154907226562]], 
                [[2658.5384674072266, 1559.6923217773438], [2643.3076934814453, 1549.5385131835938], [2651.153854370117, 1537.7692260742188], [2666.3846282958984, 1547.9230346679688]], 
                [[3514.0, 1075.0], [3514.0, 1051.0], [3530.0, 1051.0], [3530.0, 1075.0]], 
                [[3518.2307624816895, 1075.8461456298828], [3511.8384590148926, 1052.407699584961], [3523.684616088867, 1049.1769256591797], [3530.076919555664, 1072.6153717041016]], 
                [[1155.7529602050781, 1826.6117553710938], [1138.9117736816406, 1800.1470336914062], [1152.3058776855469, 1791.62353515625], [1169.1470642089844, 1818.0882568359375]], 
                [[2661.8789672851562, 1557.3885192871094], [2646.1146850585938, 1548.789794921875], [2653.1083374023438, 1535.9681396484375], [2668.8726196289062, 1544.5668640136719]], 
                [[2803.4769897460938, 1541.8153839111328], [2801.0615844726562, 1522.4923095703125], [2809.1846313476562, 1521.4769287109375], [2811.6000366210938, 1540.8000030517578]], 
                [[2659.7058868408203, 1557.8235168457031], [2643.5294036865234, 1548.1176452636719], [2650.764694213867, 1536.058837890625], [2666.941177368164, 1545.7647094726562]], 
                [[3053.5769271850586, 1936.8847045898438], [3052.0000076293945, 1929.0000610351562], [3069.692314147949, 1925.4616088867188], [3071.2692337036133, 1933.3462524414062]], 
                [[4156.0, 1629.0], [4156.0, 1615.0], [4167.0, 1615.0], [4167.0, 1629.0]], 
                [[4673.0, 1970.0], [4673.0, 1954.0], [4685.0, 1954.0], [4685.0, 1970.0]], 
                [[4680.499984741211, 1971.4999389648438], [4669.399978637695, 1967.7999877929688], [4674.79997253418, 1951.6000366210938], [4685.899978637695, 1955.2999877929688]], 
                [[7978.23583984375, 1810.7685546875], [7974.9083251953125, 1785.8121948242188], [7985.650695800781, 1784.3798828125], [7988.978210449219, 1809.3362426757812]], 
                [[2497.494125366211, 2525.5763549804688], [2475.3941192626953, 2523.8764038085938], [2476.3470611572266, 2511.4882202148438], [2498.447067260742, 2513.1881713867188]], 
                [[4673.0, 1969.0], [4673.0, 1952.0], [4686.0, 1952.0], [4686.0, 1969.0]], 
                [[4671.0, 1969.0], [4671.0, 1952.0], [4684.0, 1952.0], [4684.0, 1969.0]], 
                [[4948.300018310547, 2498.0999755859375], [4936.899993896484, 2494.2999267578125], [4943.800018310547, 2473.5999755859375], [4955.200042724609, 2477.4000244140625]], 
                [[5257.799987792969, 2239.6000366210938], [5251.200012207031, 2226.4000244140625], [5261.200012207031, 2221.4000244140625], [5267.799987792969, 2234.6000366210938]], 
                [[6612.920104980469, 2658.5599975585938], [6602.360046386719, 2644.4800415039062], [6607.960021972656, 2640.2800903320312], [6618.520080566406, 2654.3600463867188]], 
                [[6536.412353515625, 2664.9278564453125], [6528.6185302734375, 2647.3917236328125], [6546.6185302734375, 2639.3917236328125], [6554.412353515625, 2656.9278564453125]], 
                [[6818.5, 2533.5000610351562], [6805.0, 2520.0000610351562], [6819.0, 2506.0000610351562], [6832.5, 2519.5000610351562]], 
                [[7554.4000244140625, 2267.2000122070312], [7522.000061035156, 2251.0], [7530.800109863281, 2233.4000244140625], [7563.2000732421875, 2249.6000366210938]], 
                [[2477.0, 2524.0], [2477.0, 2511.0], [2500.0, 2511.0], [2500.0, 2524.0]], 
                [[2939.0, 3124.0], [2939.0, 3109.0], [2950.0, 3109.0], [2950.0, 3124.0]], 
                [[2475.0, 2523.0], [2475.0, 2511.0], [2498.0, 2511.0], [2498.0, 2523.0]], 
                [[4947.408294677734, 2497.4201126098633], [4936.047332763672, 2492.6863861083984], [4945.248504638672, 2470.603546142578], [4956.609466552734, 2475.337272644043]], 
                [[4716.307708740234, 3054.4615478515625], [4707.076934814453, 3040.6153564453125], [4739.615386962891, 3018.923095703125], [4748.846160888672, 3032.769287109375]], 
                [[6631.4615478515625, 2848.3077697753906], [6626.3538818359375, 2839.3692932128906], [6644.769287109375, 2828.846221923828], [6649.876953125, 2837.784698486328]], 
                [[6629.005882263184, 2849.7235107421875], [6623.076469421387, 2840.4058837890625], [6643.394111633301, 2827.4765014648438], [6649.323524475098, 2836.7941284179688]], 
                [[6811.0, 2529.0], [6811.0, 2509.0], [6828.0, 2509.0], [6828.0, 2529.0]], 
                [[3010.5, 3004.5], [2996.0000038146973, 2990.0], [3004.5000076293945, 2981.5], [3019.0, 2996.0]], 
                [[4326.0, 2964.0], [4326.0, 2947.0], [4337.0, 2947.0], [4337.0, 2964.0]], 
                [[4704.0, 3452.0], [4704.0, 3439.0], [4722.0, 3439.0], [4722.0, 3452.0]], 
                [[4715.384613037109, 3052.076919555664], [4706.615386962891, 3038.923065185547], [4738.923095703125, 3017.3846130371094], [4747.692321777344, 3030.5384674072266]], 
                [[5524.2352294921875, 3363.0588989257812], [5519.5009765625, 3328.3408203125], [5531.1480712890625, 3326.7525634765625], [5535.88232421875, 3361.4706420898438]], 
                [[5522.833669662476, 3364.1135864257812], [5517.947259902954, 3328.2799072265625], [5530.263689041138, 3326.6004028320312], [5535.150098800659, 3362.43408203125]], 
                [[6464.411163330078, 3199.243667602539], [6446.502532958984, 3197.9644927978516], [6448.573577880859, 3168.9695587158203], [6466.482208251953, 3170.248733520508]], 
                [[5581.0, 3789.0], [5581.0, 3758.0], [5593.0, 3758.0], [5593.0, 3789.0]], 
                [[5579.9825439453125, 3788.65087890625], [5578.4713134765625, 3758.4264526367188], [5592.7855224609375, 3757.7107543945312], [5594.2967529296875, 3787.9351806640625]], 
                [[5581.0354080200195, 3792.5309448242188], [5578.827445983887, 3759.4114990234375], [5591.703544616699, 3758.5531005859375], [5593.911506652832, 3791.6725463867188]], 
                [[7986.282287597656, 3999.6705932617188], [7977.882263183594, 3992.4706420898438], [8000.188171386719, 3966.4470825195312], [8008.588195800781, 3973.6470336914062]]
                ]

image_path = r"E:\Shipdetection\Run\base\AOI_Bengkalis\20190123_031038_1034_3B_Visual.tif"
output_path = r"E:\Processing_Me\test2.geojson"
# mục đích chính là get resolution
with rasterio.open(image_path) as src:
    
    res_x, res_y = src.res
    crs = src.crs
    origin = (src.bounds.left, src.bounds.top)

# mục này mục đích là chuyển tọa độ ảnh đang có về tọa độ 4326 
p1 = Proj(init=crs.to_dict()['init'])
p2 = Proj(init='epsg:4326')

shapely_polygons = list_polygons_to_list_shapely_polygons(polygons_test)
geo_polygons = list_shapely_polygons_to_list_dict_geometry_have_coord(shapely_polygons, origin, res_x, res_y)
create_geojson_from_list_polygon(geo_polygons, output_path)


